//
//
//Copyright 2018 Continusec Pty Ltd
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: sso.proto

package geecert

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GeeCertServer_GetSSHCerts_FullMethodName = "/GeeCertServer/GetSSHCerts"
)

// GeeCertServerClient is the client API for GeeCertServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeeCertServerClient interface {
	GetSSHCerts(ctx context.Context, in *SSHCertsRequest, opts ...grpc.CallOption) (*SSHCertsResponse, error)
}

type geeCertServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGeeCertServerClient(cc grpc.ClientConnInterface) GeeCertServerClient {
	return &geeCertServerClient{cc}
}

func (c *geeCertServerClient) GetSSHCerts(ctx context.Context, in *SSHCertsRequest, opts ...grpc.CallOption) (*SSHCertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSHCertsResponse)
	err := c.cc.Invoke(ctx, GeeCertServer_GetSSHCerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeeCertServerServer is the server API for GeeCertServer service.
// All implementations must embed UnimplementedGeeCertServerServer
// for forward compatibility.
type GeeCertServerServer interface {
	GetSSHCerts(context.Context, *SSHCertsRequest) (*SSHCertsResponse, error)
	mustEmbedUnimplementedGeeCertServerServer()
}

// UnimplementedGeeCertServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGeeCertServerServer struct{}

func (UnimplementedGeeCertServerServer) GetSSHCerts(context.Context, *SSHCertsRequest) (*SSHCertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSSHCerts not implemented")
}
func (UnimplementedGeeCertServerServer) mustEmbedUnimplementedGeeCertServerServer() {}
func (UnimplementedGeeCertServerServer) testEmbeddedByValue()                       {}

// UnsafeGeeCertServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeeCertServerServer will
// result in compilation errors.
type UnsafeGeeCertServerServer interface {
	mustEmbedUnimplementedGeeCertServerServer()
}

func RegisterGeeCertServerServer(s grpc.ServiceRegistrar, srv GeeCertServerServer) {
	// If the following call pancis, it indicates UnimplementedGeeCertServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GeeCertServer_ServiceDesc, srv)
}

func _GeeCertServer_GetSSHCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHCertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeeCertServerServer).GetSSHCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeeCertServer_GetSSHCerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeeCertServerServer).GetSSHCerts(ctx, req.(*SSHCertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeeCertServer_ServiceDesc is the grpc.ServiceDesc for GeeCertServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeeCertServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GeeCertServer",
	HandlerType: (*GeeCertServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSSHCerts",
			Handler:    _GeeCertServer_GetSSHCerts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso.proto",
}
