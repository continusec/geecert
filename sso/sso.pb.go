// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sso.proto

/*
Package sso is a generated protocol buffer package.

It is generated from these files:
	sso.proto

It has these top-level messages:
	SSHCertsRequest
	SSHCertsResponse
	ServerConfig
*/
package sso

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ResponseCode int32

const (
	ResponseCode_OK               ResponseCode = 0
	ResponseCode_INVALID_ID_TOKEN ResponseCode = 1
	ResponseCode_NO_CERTS_ALLOWED ResponseCode = 2
)

var ResponseCode_name = map[int32]string{
	0: "OK",
	1: "INVALID_ID_TOKEN",
	2: "NO_CERTS_ALLOWED",
}
var ResponseCode_value = map[string]int32{
	"OK":               0,
	"INVALID_ID_TOKEN": 1,
	"NO_CERTS_ALLOWED": 2,
}

func (x ResponseCode) String() string {
	return proto.EnumName(ResponseCode_name, int32(x))
}
func (ResponseCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SSHCertsRequest struct {
	IdToken   string `protobuf:"bytes,1,opt,name=id_token,json=idToken" json:"id_token,omitempty"`
	PublicKey string `protobuf:"bytes,2,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
}

func (m *SSHCertsRequest) Reset()                    { *m = SSHCertsRequest{} }
func (m *SSHCertsRequest) String() string            { return proto.CompactTextString(m) }
func (*SSHCertsRequest) ProtoMessage()               {}
func (*SSHCertsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SSHCertsRequest) GetIdToken() string {
	if m != nil {
		return m.IdToken
	}
	return ""
}

func (m *SSHCertsRequest) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

type SSHCertsResponse struct {
	Status                 ResponseCode `protobuf:"varint,1,opt,name=status,enum=ResponseCode" json:"status,omitempty"`
	Certificate            string       `protobuf:"bytes,2,opt,name=certificate" json:"certificate,omitempty"`
	CertificateAuthorities []string     `protobuf:"bytes,3,rep,name=certificate_authorities,json=certificateAuthorities" json:"certificate_authorities,omitempty"`
	Config                 []string     `protobuf:"bytes,4,rep,name=config" json:"config,omitempty"`
}

func (m *SSHCertsResponse) Reset()                    { *m = SSHCertsResponse{} }
func (m *SSHCertsResponse) String() string            { return proto.CompactTextString(m) }
func (*SSHCertsResponse) ProtoMessage()               {}
func (*SSHCertsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SSHCertsResponse) GetStatus() ResponseCode {
	if m != nil {
		return m.Status
	}
	return ResponseCode_OK
}

func (m *SSHCertsResponse) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *SSHCertsResponse) GetCertificateAuthorities() []string {
	if m != nil {
		return m.CertificateAuthorities
	}
	return nil
}

func (m *SSHCertsResponse) GetConfig() []string {
	if m != nil {
		return m.Config
	}
	return nil
}

type ServerConfig struct {
	CaKeyPath                      string                              `protobuf:"bytes,1,opt,name=ca_key_path,json=caKeyPath" json:"ca_key_path,omitempty"`
	GenerateCertDurationSeconds    int32                               `protobuf:"varint,2,opt,name=generate_cert_duration_seconds,json=generateCertDurationSeconds" json:"generate_cert_duration_seconds,omitempty"`
	ClientConfigScope              string                              `protobuf:"bytes,3,opt,name=client_config_scope,json=clientConfigScope" json:"client_config_scope,omitempty"`
	AllowedUsers                   map[string]*ServerConfig_UserConfig `protobuf:"bytes,4,rep,name=allowed_users,json=allowedUsers" json:"allowed_users,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ListenPort                     int32                               `protobuf:"varint,5,opt,name=listen_port,json=listenPort" json:"listen_port,omitempty"`
	AllowedDomainForIdToken        string                              `protobuf:"bytes,6,opt,name=allowed_domain_for_id_token,json=allowedDomainForIdToken" json:"allowed_domain_for_id_token,omitempty"`
	AllowedClientIdForIdToken      string                              `protobuf:"bytes,7,opt,name=allowed_client_id_for_id_token,json=allowedClientIdForIdToken" json:"allowed_client_id_for_id_token,omitempty"`
	ServerCertPath                 string                              `protobuf:"bytes,8,opt,name=server_cert_path,json=serverCertPath" json:"server_cert_path,omitempty"`
	ServerKeyPath                  string                              `protobuf:"bytes,9,opt,name=server_key_path,json=serverKeyPath" json:"server_key_path,omitempty"`
	AdditionalSshConfigurationLine []string                            `protobuf:"bytes,10,rep,name=additional_ssh_configuration_line,json=additionalSshConfigurationLine" json:"additional_ssh_configuration_line,omitempty"`
	CaComment                      string                              `protobuf:"bytes,11,opt,name=ca_comment,json=caComment" json:"ca_comment,omitempty"`
	HttpListenPort                 int32                               `protobuf:"varint,12,opt,name=http_listen_port,json=httpListenPort" json:"http_listen_port,omitempty"`
	AllowedHosts                   []string                            `protobuf:"bytes,13,rep,name=allowed_hosts,json=allowedHosts" json:"allowed_hosts,omitempty"`
	CaddyFilePath                  string                              `protobuf:"bytes,14,opt,name=caddy_file_path,json=caddyFilePath" json:"caddy_file_path,omitempty"`
	SshConnectForPublickeyPort     int32                               `protobuf:"varint,15,opt,name=ssh_connect_for_publickey_port,json=sshConnectForPublickeyPort" json:"ssh_connect_for_publickey_port,omitempty"`
}

func (m *ServerConfig) Reset()                    { *m = ServerConfig{} }
func (m *ServerConfig) String() string            { return proto.CompactTextString(m) }
func (*ServerConfig) ProtoMessage()               {}
func (*ServerConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ServerConfig) GetCaKeyPath() string {
	if m != nil {
		return m.CaKeyPath
	}
	return ""
}

func (m *ServerConfig) GetGenerateCertDurationSeconds() int32 {
	if m != nil {
		return m.GenerateCertDurationSeconds
	}
	return 0
}

func (m *ServerConfig) GetClientConfigScope() string {
	if m != nil {
		return m.ClientConfigScope
	}
	return ""
}

func (m *ServerConfig) GetAllowedUsers() map[string]*ServerConfig_UserConfig {
	if m != nil {
		return m.AllowedUsers
	}
	return nil
}

func (m *ServerConfig) GetListenPort() int32 {
	if m != nil {
		return m.ListenPort
	}
	return 0
}

func (m *ServerConfig) GetAllowedDomainForIdToken() string {
	if m != nil {
		return m.AllowedDomainForIdToken
	}
	return ""
}

func (m *ServerConfig) GetAllowedClientIdForIdToken() string {
	if m != nil {
		return m.AllowedClientIdForIdToken
	}
	return ""
}

func (m *ServerConfig) GetServerCertPath() string {
	if m != nil {
		return m.ServerCertPath
	}
	return ""
}

func (m *ServerConfig) GetServerKeyPath() string {
	if m != nil {
		return m.ServerKeyPath
	}
	return ""
}

func (m *ServerConfig) GetAdditionalSshConfigurationLine() []string {
	if m != nil {
		return m.AdditionalSshConfigurationLine
	}
	return nil
}

func (m *ServerConfig) GetCaComment() string {
	if m != nil {
		return m.CaComment
	}
	return ""
}

func (m *ServerConfig) GetHttpListenPort() int32 {
	if m != nil {
		return m.HttpListenPort
	}
	return 0
}

func (m *ServerConfig) GetAllowedHosts() []string {
	if m != nil {
		return m.AllowedHosts
	}
	return nil
}

func (m *ServerConfig) GetCaddyFilePath() string {
	if m != nil {
		return m.CaddyFilePath
	}
	return ""
}

func (m *ServerConfig) GetSshConnectForPublickeyPort() int32 {
	if m != nil {
		return m.SshConnectForPublickeyPort
	}
	return 0
}

type ServerConfig_UserConfig struct {
	Username        string            `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	ExtraPrincipals []string          `protobuf:"bytes,2,rep,name=extra_principals,json=extraPrincipals" json:"extra_principals,omitempty"`
	CertPermissions map[string]string `protobuf:"bytes,3,rep,name=cert_permissions,json=certPermissions" json:"cert_permissions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ServerConfig_UserConfig) Reset()                    { *m = ServerConfig_UserConfig{} }
func (m *ServerConfig_UserConfig) String() string            { return proto.CompactTextString(m) }
func (*ServerConfig_UserConfig) ProtoMessage()               {}
func (*ServerConfig_UserConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *ServerConfig_UserConfig) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ServerConfig_UserConfig) GetExtraPrincipals() []string {
	if m != nil {
		return m.ExtraPrincipals
	}
	return nil
}

func (m *ServerConfig_UserConfig) GetCertPermissions() map[string]string {
	if m != nil {
		return m.CertPermissions
	}
	return nil
}

func init() {
	proto.RegisterType((*SSHCertsRequest)(nil), "SSHCertsRequest")
	proto.RegisterType((*SSHCertsResponse)(nil), "SSHCertsResponse")
	proto.RegisterType((*ServerConfig)(nil), "ServerConfig")
	proto.RegisterType((*ServerConfig_UserConfig)(nil), "ServerConfig.UserConfig")
	proto.RegisterEnum("ResponseCode", ResponseCode_name, ResponseCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GeeCertServer service

type GeeCertServerClient interface {
	GetSSHCerts(ctx context.Context, in *SSHCertsRequest, opts ...grpc.CallOption) (*SSHCertsResponse, error)
}

type geeCertServerClient struct {
	cc *grpc.ClientConn
}

func NewGeeCertServerClient(cc *grpc.ClientConn) GeeCertServerClient {
	return &geeCertServerClient{cc}
}

func (c *geeCertServerClient) GetSSHCerts(ctx context.Context, in *SSHCertsRequest, opts ...grpc.CallOption) (*SSHCertsResponse, error) {
	out := new(SSHCertsResponse)
	err := grpc.Invoke(ctx, "/GeeCertServer/GetSSHCerts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GeeCertServer service

type GeeCertServerServer interface {
	GetSSHCerts(context.Context, *SSHCertsRequest) (*SSHCertsResponse, error)
}

func RegisterGeeCertServerServer(s *grpc.Server, srv GeeCertServerServer) {
	s.RegisterService(&_GeeCertServer_serviceDesc, srv)
}

func _GeeCertServer_GetSSHCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHCertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeeCertServerServer).GetSSHCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GeeCertServer/GetSSHCerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeeCertServerServer).GetSSHCerts(ctx, req.(*SSHCertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GeeCertServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GeeCertServer",
	HandlerType: (*GeeCertServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSSHCerts",
			Handler:    _GeeCertServer_GetSSHCerts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso.proto",
}

func init() { proto.RegisterFile("sso.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 788 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x6d, 0x6f, 0xdb, 0x36,
	0x10, 0xae, 0x93, 0xc5, 0x8d, 0x4f, 0x71, 0xac, 0x70, 0x41, 0xab, 0xba, 0x98, 0x9b, 0x65, 0xd8,
	0x90, 0x0d, 0x98, 0x3e, 0x78, 0x03, 0x36, 0x0c, 0xfb, 0xe2, 0xc8, 0x4e, 0x6b, 0xd8, 0x48, 0x0c,
	0x3b, 0x7b, 0xfb, 0x44, 0xb0, 0xd2, 0xb9, 0x26, 0x2a, 0x93, 0x1a, 0x49, 0x77, 0xf3, 0x7f, 0xda,
	0x9f, 0xd9, 0x4f, 0xd9, 0x3f, 0x18, 0x48, 0x4a, 0xb6, 0xd2, 0x75, 0xdf, 0x74, 0xcf, 0x3d, 0xba,
	0x7b, 0xee, 0x85, 0x07, 0x2d, 0xad, 0x65, 0x5c, 0x28, 0x69, 0xe4, 0xe5, 0x04, 0x3a, 0x8b, 0xc5,
	0xab, 0x04, 0x95, 0xd1, 0x73, 0xfc, 0x7d, 0x83, 0xda, 0x90, 0x67, 0x70, 0xcc, 0x33, 0x6a, 0xe4,
	0x5b, 0x14, 0x51, 0xe3, 0xa2, 0x71, 0xd5, 0x9a, 0x3f, 0xe6, 0xd9, 0xbd, 0x35, 0xc9, 0x27, 0x00,
	0xc5, 0xe6, 0x75, 0xce, 0x53, 0xfa, 0x16, 0xb7, 0xd1, 0x81, 0x73, 0xb6, 0x3c, 0x32, 0xc1, 0xed,
	0xe5, 0x5f, 0x0d, 0x08, 0xf7, 0xd1, 0x74, 0x21, 0x85, 0x46, 0xf2, 0x39, 0x34, 0xb5, 0x61, 0x66,
	0xa3, 0x5d, 0xb0, 0xd3, 0x7e, 0x3b, 0xae, 0x5c, 0x89, 0xcc, 0x70, 0x5e, 0x3a, 0xc9, 0x05, 0x04,
	0x29, 0x2a, 0xc3, 0x97, 0x3c, 0x65, 0x06, 0xcb, 0xd8, 0x75, 0x88, 0x7c, 0x07, 0x4f, 0x6b, 0x26,
	0x65, 0x1b, 0xb3, 0x92, 0x8a, 0x1b, 0x8e, 0x3a, 0x3a, 0xbc, 0x38, 0xbc, 0x6a, 0xcd, 0x9f, 0xd4,
	0xdc, 0x83, 0xbd, 0x97, 0x3c, 0x81, 0x66, 0x2a, 0xc5, 0x92, 0xbf, 0x89, 0x3e, 0x72, 0xbc, 0xd2,
	0xba, 0xfc, 0xfb, 0x18, 0x4e, 0x16, 0xa8, 0xde, 0xa1, 0x4a, 0x1c, 0x40, 0x7a, 0x10, 0xa4, 0xcc,
	0x96, 0x46, 0x0b, 0x66, 0x56, 0x65, 0xf1, 0xad, 0x94, 0x4d, 0x70, 0x3b, 0x63, 0x66, 0x45, 0x12,
	0xe8, 0xbd, 0x41, 0x81, 0xca, 0xa6, 0xb7, 0xb9, 0x68, 0xb6, 0x51, 0xcc, 0x70, 0x29, 0xa8, 0xc6,
	0x54, 0x8a, 0x4c, 0x3b, 0xd9, 0x47, 0xf3, 0xe7, 0x15, 0xcb, 0x76, 0x62, 0x58, 0x72, 0x16, 0x9e,
	0x42, 0x62, 0xf8, 0x38, 0xcd, 0x39, 0x0a, 0x43, 0xbd, 0x0c, 0xaa, 0x53, 0x59, 0x60, 0x74, 0xe8,
	0x92, 0x9d, 0x79, 0x97, 0xd7, 0xb3, 0xb0, 0x0e, 0x32, 0x84, 0x36, 0xcb, 0x73, 0xf9, 0x07, 0x66,
	0x74, 0xa3, 0x51, 0x69, 0x57, 0x44, 0xd0, 0x7f, 0x11, 0xd7, 0xa5, 0xc7, 0x03, 0x4f, 0xf9, 0xc9,
	0x32, 0x46, 0xc2, 0xa8, 0xed, 0xfc, 0x84, 0xd5, 0x20, 0xf2, 0x02, 0x82, 0x9c, 0x6b, 0x83, 0x82,
	0x16, 0x52, 0x99, 0xe8, 0xc8, 0xe9, 0x04, 0x0f, 0xcd, 0xa4, 0x32, 0xe4, 0x47, 0x78, 0x5e, 0xa5,
	0xc9, 0xe4, 0x9a, 0x71, 0x41, 0x97, 0x52, 0xd1, 0xdd, 0x22, 0x34, 0x9d, 0xbc, 0xa7, 0x25, 0x65,
	0xe8, 0x18, 0x37, 0x52, 0x8d, 0xcb, 0xc5, 0x18, 0x40, 0xaf, 0xfa, 0xbb, 0x2c, 0x8e, 0x67, 0x0f,
	0x03, 0x3c, 0x76, 0x01, 0x9e, 0x95, 0xac, 0xc4, 0x91, 0xc6, 0x59, 0x2d, 0xc4, 0x15, 0x84, 0xda,
	0x55, 0xe4, 0x5b, 0xeb, 0x26, 0x70, 0xec, 0x7e, 0x3a, 0xf5, 0xb8, 0x6d, 0xa6, 0x1b, 0xc3, 0x17,
	0xd0, 0x29, 0x99, 0xbb, 0x51, 0xb5, 0x1c, 0xb1, 0xed, 0xe1, 0x6a, 0x5c, 0x63, 0xf8, 0x94, 0x65,
	0x19, 0xb7, 0xcd, 0x67, 0x39, 0xd5, 0x7a, 0x55, 0x76, 0xbc, 0x1a, 0x5a, 0xce, 0x05, 0x46, 0xe0,
	0x56, 0xa2, 0xb7, 0x27, 0x2e, 0xf4, 0x2a, 0xa9, 0xd3, 0xa6, 0x5c, 0xa0, 0x5d, 0xfc, 0x94, 0xd1,
	0x54, 0xae, 0xd7, 0x28, 0x4c, 0x14, 0x54, 0x8b, 0x91, 0x78, 0xc0, 0x6a, 0x5f, 0x19, 0x53, 0xd0,
	0x7a, 0x8b, 0x4f, 0x5c, 0x8b, 0x4f, 0x2d, 0x3e, 0xdd, 0xb7, 0xf9, 0xb3, 0xfd, 0x34, 0x57, 0x52,
	0x1b, 0x1d, 0xb5, 0x5d, 0xfe, 0x6a, 0x58, 0xaf, 0x2c, 0x66, 0x0b, 0x4c, 0x59, 0x96, 0x6d, 0xe9,
	0x92, 0xe7, 0xe8, 0x0b, 0x3c, 0xf5, 0x05, 0x3a, 0xf8, 0x86, 0xe7, 0xe8, 0x0a, 0xbc, 0x86, 0x5e,
	0x59, 0x95, 0xc0, 0xd4, 0xb8, 0x7e, 0xfb, 0xc7, 0xe8, 0xfa, 0x62, 0x45, 0x74, 0x9c, 0x88, 0xae,
	0x76, 0x35, 0x59, 0xd2, 0x8d, 0x54, 0xb3, 0x8a, 0x62, 0x05, 0x75, 0xff, 0x69, 0x00, 0xd8, 0x15,
	0x29, 0x9f, 0x40, 0x17, 0x8e, 0xed, 0x96, 0x09, 0xb6, 0xc6, 0x72, 0xff, 0x77, 0x36, 0xf9, 0x12,
	0x42, 0xfc, 0xd3, 0x28, 0x46, 0x0b, 0xc5, 0x45, 0xca, 0x0b, 0x96, 0xdb, 0x85, 0xb7, 0xf2, 0x3b,
	0x0e, 0x9f, 0xed, 0x60, 0xf2, 0x2b, 0x84, 0x7e, 0x8a, 0xa8, 0xd6, 0x5c, 0x6b, 0x2e, 0x85, 0x7f,
	0xa4, 0x41, 0xff, 0xeb, 0x87, 0x7b, 0xbb, 0x4f, 0x1d, 0xbb, 0xf9, 0xee, 0xf9, 0x7e, 0x8b, 0x3b,
	0xe9, 0x43, 0xb4, 0x7b, 0x0d, 0xe7, 0x1f, 0x22, 0x92, 0x10, 0x0e, 0xed, 0x4d, 0xf2, 0x9a, 0xed,
	0x27, 0x39, 0x87, 0xa3, 0x77, 0x2c, 0xdf, 0x54, 0xb7, 0xc4, 0x1b, 0x3f, 0x1c, 0x7c, 0xdf, 0xe8,
	0xfe, 0x06, 0x67, 0xff, 0x79, 0x2f, 0x1f, 0x08, 0x10, 0xd7, 0x03, 0x04, 0xfd, 0xe8, 0xff, 0x94,
	0xd7, 0x42, 0x7f, 0x75, 0x0d, 0x27, 0xf5, 0xf3, 0x46, 0x9a, 0x70, 0x70, 0x37, 0x09, 0x1f, 0x91,
	0x73, 0x08, 0xc7, 0xb7, 0x3f, 0x0f, 0xa6, 0xe3, 0x21, 0x1d, 0x0f, 0xe9, 0xfd, 0xdd, 0x64, 0x74,
	0x1b, 0x36, 0x2c, 0x7a, 0x7b, 0x47, 0x93, 0xd1, 0xfc, 0x7e, 0x41, 0x07, 0xd3, 0xe9, 0xdd, 0x2f,
	0xa3, 0x61, 0x78, 0xd0, 0x1f, 0x41, 0xfb, 0x25, 0xba, 0xdb, 0xe1, 0x13, 0x92, 0x6f, 0x21, 0x78,
	0x89, 0xa6, 0xba, 0xac, 0x24, 0x8c, 0xdf, 0x3b, 0xd9, 0xdd, 0xb3, 0xf8, 0xfd, 0xb3, 0x7b, 0xf9,
	0xe8, 0x75, 0xd3, 0x5d, 0xf8, 0x6f, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x84, 0x7a, 0x83,
	0xee, 0x05, 0x00, 0x00,
}
