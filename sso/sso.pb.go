// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sso.proto

package sso

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ResponseCode int32

const (
	ResponseCode_OK               ResponseCode = 0
	ResponseCode_INVALID_ID_TOKEN ResponseCode = 1
	ResponseCode_NO_CERTS_ALLOWED ResponseCode = 2
)

var ResponseCode_name = map[int32]string{
	0: "OK",
	1: "INVALID_ID_TOKEN",
	2: "NO_CERTS_ALLOWED",
}

var ResponseCode_value = map[string]int32{
	"OK":               0,
	"INVALID_ID_TOKEN": 1,
	"NO_CERTS_ALLOWED": 2,
}

func (x ResponseCode) String() string {
	return proto.EnumName(ResponseCode_name, int32(x))
}

func (ResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_37aabceb39ca51ce, []int{0}
}

type SSHCertsRequest struct {
	IdToken              string   `protobuf:"bytes,1,opt,name=id_token,json=idToken,proto3" json:"id_token,omitempty"`
	PublicKey            string   `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSHCertsRequest) Reset()         { *m = SSHCertsRequest{} }
func (m *SSHCertsRequest) String() string { return proto.CompactTextString(m) }
func (*SSHCertsRequest) ProtoMessage()    {}
func (*SSHCertsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37aabceb39ca51ce, []int{0}
}

func (m *SSHCertsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSHCertsRequest.Unmarshal(m, b)
}
func (m *SSHCertsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSHCertsRequest.Marshal(b, m, deterministic)
}
func (m *SSHCertsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSHCertsRequest.Merge(m, src)
}
func (m *SSHCertsRequest) XXX_Size() int {
	return xxx_messageInfo_SSHCertsRequest.Size(m)
}
func (m *SSHCertsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SSHCertsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SSHCertsRequest proto.InternalMessageInfo

func (m *SSHCertsRequest) GetIdToken() string {
	if m != nil {
		return m.IdToken
	}
	return ""
}

func (m *SSHCertsRequest) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

type SSHCertsResponse struct {
	Status                 ResponseCode `protobuf:"varint,1,opt,name=status,proto3,enum=ResponseCode" json:"status,omitempty"`
	Certificate            string       `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
	CertificateAuthorities []string     `protobuf:"bytes,3,rep,name=certificate_authorities,json=certificateAuthorities,proto3" json:"certificate_authorities,omitempty"`
	Config                 []string     `protobuf:"bytes,4,rep,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}     `json:"-"`
	XXX_unrecognized       []byte       `json:"-"`
	XXX_sizecache          int32        `json:"-"`
}

func (m *SSHCertsResponse) Reset()         { *m = SSHCertsResponse{} }
func (m *SSHCertsResponse) String() string { return proto.CompactTextString(m) }
func (*SSHCertsResponse) ProtoMessage()    {}
func (*SSHCertsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37aabceb39ca51ce, []int{1}
}

func (m *SSHCertsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSHCertsResponse.Unmarshal(m, b)
}
func (m *SSHCertsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSHCertsResponse.Marshal(b, m, deterministic)
}
func (m *SSHCertsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSHCertsResponse.Merge(m, src)
}
func (m *SSHCertsResponse) XXX_Size() int {
	return xxx_messageInfo_SSHCertsResponse.Size(m)
}
func (m *SSHCertsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SSHCertsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SSHCertsResponse proto.InternalMessageInfo

func (m *SSHCertsResponse) GetStatus() ResponseCode {
	if m != nil {
		return m.Status
	}
	return ResponseCode_OK
}

func (m *SSHCertsResponse) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *SSHCertsResponse) GetCertificateAuthorities() []string {
	if m != nil {
		return m.CertificateAuthorities
	}
	return nil
}

func (m *SSHCertsResponse) GetConfig() []string {
	if m != nil {
		return m.Config
	}
	return nil
}

type ServerConfig struct {
	CaKeyPath                   string                              `protobuf:"bytes,1,opt,name=ca_key_path,json=caKeyPath,proto3" json:"ca_key_path,omitempty"`
	GenerateCertDurationSeconds int32                               `protobuf:"varint,2,opt,name=generate_cert_duration_seconds,json=generateCertDurationSeconds,proto3" json:"generate_cert_duration_seconds,omitempty"`
	AllowedUsers                map[string]*ServerConfig_UserConfig `protobuf:"bytes,4,rep,name=allowed_users,json=allowedUsers,proto3" json:"allowed_users,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ListenPort                  int32                               `protobuf:"varint,5,opt,name=listen_port,json=listenPort,proto3" json:"listen_port,omitempty"`
	AllowedDomainForIdToken     string                              `protobuf:"bytes,6,opt,name=allowed_domain_for_id_token,json=allowedDomainForIdToken,proto3" json:"allowed_domain_for_id_token,omitempty"`
	AllowedClientIdForIdToken   string                              `protobuf:"bytes,7,opt,name=allowed_client_id_for_id_token,json=allowedClientIdForIdToken,proto3" json:"allowed_client_id_for_id_token,omitempty"`
	ServerCertPath              string                              `protobuf:"bytes,8,opt,name=server_cert_path,json=serverCertPath,proto3" json:"server_cert_path,omitempty"`
	ServerKeyPath               string                              `protobuf:"bytes,9,opt,name=server_key_path,json=serverKeyPath,proto3" json:"server_key_path,omitempty"`
	CaComment                   string                              `protobuf:"bytes,11,opt,name=ca_comment,json=caComment,proto3" json:"ca_comment,omitempty"`
	HttpListenPort              int32                               `protobuf:"varint,12,opt,name=http_listen_port,json=httpListenPort,proto3" json:"http_listen_port,omitempty"`
	AllowedHosts                []string                            `protobuf:"bytes,13,rep,name=allowed_hosts,json=allowedHosts,proto3" json:"allowed_hosts,omitempty"`
	SshConnectForPublickeyPort  int32                               `protobuf:"varint,15,opt,name=ssh_connect_for_publickey_port,json=sshConnectForPublickeyPort,proto3" json:"ssh_connect_for_publickey_port,omitempty"`
	UserProfiles                map[string]*ServerConfig_Profile    `protobuf:"bytes,16,rep,name=user_profiles,json=userProfiles,proto3" json:"user_profiles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// path to pem with key, cert and intermediates
	HostSigningTlsPath string `protobuf:"bytes,17,opt,name=host_signing_tls_path,json=hostSigningTlsPath,proto3" json:"host_signing_tls_path,omitempty"`
	// e.g. https://accounts.google.com/.well-known/openid-configuration for Google
	// e.g. https://login.microsoftonline.com/<tenancy id>/.well-known/openid-configuration for Azure AD
	OidcConfigurationUrl string `protobuf:"bytes,18,opt,name=oidc_configuration_url,json=oidcConfigurationUrl,proto3" json:"oidc_configuration_url,omitempty"`
	// if set verify "appid" claim for client ID, INSTEAD OF "aud" claim - useful for Azure Access Token
	LookForAudienceInAppId bool `protobuf:"varint,19,opt,name=look_for_audience_in_app_id,json=lookForAudienceInAppId,proto3" json:"look_for_audience_in_app_id,omitempty"`
	// if set, check for suffix in email field instead of "hd" cliam. useful for Azure Access Token
	LookForHostedDomainInEmail bool `protobuf:"varint,20,opt,name=look_for_hosted_domain_in_email,json=lookForHostedDomainInEmail,proto3" json:"look_for_hosted_domain_in_email,omitempty"`
	// if set, don't require email_verified field. Useful for Azure Access token
	SkipEmailVerified    bool     `protobuf:"varint,21,opt,name=skip_email_verified,json=skipEmailVerified,proto3" json:"skip_email_verified,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerConfig) Reset()         { *m = ServerConfig{} }
func (m *ServerConfig) String() string { return proto.CompactTextString(m) }
func (*ServerConfig) ProtoMessage()    {}
func (*ServerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_37aabceb39ca51ce, []int{2}
}

func (m *ServerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerConfig.Unmarshal(m, b)
}
func (m *ServerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerConfig.Marshal(b, m, deterministic)
}
func (m *ServerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerConfig.Merge(m, src)
}
func (m *ServerConfig) XXX_Size() int {
	return xxx_messageInfo_ServerConfig.Size(m)
}
func (m *ServerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ServerConfig proto.InternalMessageInfo

func (m *ServerConfig) GetCaKeyPath() string {
	if m != nil {
		return m.CaKeyPath
	}
	return ""
}

func (m *ServerConfig) GetGenerateCertDurationSeconds() int32 {
	if m != nil {
		return m.GenerateCertDurationSeconds
	}
	return 0
}

func (m *ServerConfig) GetAllowedUsers() map[string]*ServerConfig_UserConfig {
	if m != nil {
		return m.AllowedUsers
	}
	return nil
}

func (m *ServerConfig) GetListenPort() int32 {
	if m != nil {
		return m.ListenPort
	}
	return 0
}

func (m *ServerConfig) GetAllowedDomainForIdToken() string {
	if m != nil {
		return m.AllowedDomainForIdToken
	}
	return ""
}

func (m *ServerConfig) GetAllowedClientIdForIdToken() string {
	if m != nil {
		return m.AllowedClientIdForIdToken
	}
	return ""
}

func (m *ServerConfig) GetServerCertPath() string {
	if m != nil {
		return m.ServerCertPath
	}
	return ""
}

func (m *ServerConfig) GetServerKeyPath() string {
	if m != nil {
		return m.ServerKeyPath
	}
	return ""
}

func (m *ServerConfig) GetCaComment() string {
	if m != nil {
		return m.CaComment
	}
	return ""
}

func (m *ServerConfig) GetHttpListenPort() int32 {
	if m != nil {
		return m.HttpListenPort
	}
	return 0
}

func (m *ServerConfig) GetAllowedHosts() []string {
	if m != nil {
		return m.AllowedHosts
	}
	return nil
}

func (m *ServerConfig) GetSshConnectForPublickeyPort() int32 {
	if m != nil {
		return m.SshConnectForPublickeyPort
	}
	return 0
}

func (m *ServerConfig) GetUserProfiles() map[string]*ServerConfig_Profile {
	if m != nil {
		return m.UserProfiles
	}
	return nil
}

func (m *ServerConfig) GetHostSigningTlsPath() string {
	if m != nil {
		return m.HostSigningTlsPath
	}
	return ""
}

func (m *ServerConfig) GetOidcConfigurationUrl() string {
	if m != nil {
		return m.OidcConfigurationUrl
	}
	return ""
}

func (m *ServerConfig) GetLookForAudienceInAppId() bool {
	if m != nil {
		return m.LookForAudienceInAppId
	}
	return false
}

func (m *ServerConfig) GetLookForHostedDomainInEmail() bool {
	if m != nil {
		return m.LookForHostedDomainInEmail
	}
	return false
}

func (m *ServerConfig) GetSkipEmailVerified() bool {
	if m != nil {
		return m.SkipEmailVerified
	}
	return false
}

type ServerConfig_UserConfig struct {
	Profiles             []string `protobuf:"bytes,4,rep,name=profiles,proto3" json:"profiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerConfig_UserConfig) Reset()         { *m = ServerConfig_UserConfig{} }
func (m *ServerConfig_UserConfig) String() string { return proto.CompactTextString(m) }
func (*ServerConfig_UserConfig) ProtoMessage()    {}
func (*ServerConfig_UserConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_37aabceb39ca51ce, []int{2, 0}
}

func (m *ServerConfig_UserConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerConfig_UserConfig.Unmarshal(m, b)
}
func (m *ServerConfig_UserConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerConfig_UserConfig.Marshal(b, m, deterministic)
}
func (m *ServerConfig_UserConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerConfig_UserConfig.Merge(m, src)
}
func (m *ServerConfig_UserConfig) XXX_Size() int {
	return xxx_messageInfo_ServerConfig_UserConfig.Size(m)
}
func (m *ServerConfig_UserConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerConfig_UserConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ServerConfig_UserConfig proto.InternalMessageInfo

func (m *ServerConfig_UserConfig) GetProfiles() []string {
	if m != nil {
		return m.Profiles
	}
	return nil
}

type ServerConfig_Profile struct {
	Principals           []string          `protobuf:"bytes,1,rep,name=principals,proto3" json:"principals,omitempty"`
	CertPermissions      map[string]string `protobuf:"bytes,2,rep,name=cert_permissions,json=certPermissions,proto3" json:"cert_permissions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SshConfigLines       []string          `protobuf:"bytes,3,rep,name=ssh_config_lines,json=sshConfigLines,proto3" json:"ssh_config_lines,omitempty"`
	KnownHosts           []string          `protobuf:"bytes,4,rep,name=known_hosts,json=knownHosts,proto3" json:"known_hosts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ServerConfig_Profile) Reset()         { *m = ServerConfig_Profile{} }
func (m *ServerConfig_Profile) String() string { return proto.CompactTextString(m) }
func (*ServerConfig_Profile) ProtoMessage()    {}
func (*ServerConfig_Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_37aabceb39ca51ce, []int{2, 1}
}

func (m *ServerConfig_Profile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerConfig_Profile.Unmarshal(m, b)
}
func (m *ServerConfig_Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerConfig_Profile.Marshal(b, m, deterministic)
}
func (m *ServerConfig_Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerConfig_Profile.Merge(m, src)
}
func (m *ServerConfig_Profile) XXX_Size() int {
	return xxx_messageInfo_ServerConfig_Profile.Size(m)
}
func (m *ServerConfig_Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerConfig_Profile.DiscardUnknown(m)
}

var xxx_messageInfo_ServerConfig_Profile proto.InternalMessageInfo

func (m *ServerConfig_Profile) GetPrincipals() []string {
	if m != nil {
		return m.Principals
	}
	return nil
}

func (m *ServerConfig_Profile) GetCertPermissions() map[string]string {
	if m != nil {
		return m.CertPermissions
	}
	return nil
}

func (m *ServerConfig_Profile) GetSshConfigLines() []string {
	if m != nil {
		return m.SshConfigLines
	}
	return nil
}

func (m *ServerConfig_Profile) GetKnownHosts() []string {
	if m != nil {
		return m.KnownHosts
	}
	return nil
}

func init() {
	proto.RegisterEnum("ResponseCode", ResponseCode_name, ResponseCode_value)
	proto.RegisterType((*SSHCertsRequest)(nil), "SSHCertsRequest")
	proto.RegisterType((*SSHCertsResponse)(nil), "SSHCertsResponse")
	proto.RegisterType((*ServerConfig)(nil), "ServerConfig")
	proto.RegisterMapType((map[string]*ServerConfig_UserConfig)(nil), "ServerConfig.AllowedUsersEntry")
	proto.RegisterMapType((map[string]*ServerConfig_Profile)(nil), "ServerConfig.UserProfilesEntry")
	proto.RegisterType((*ServerConfig_UserConfig)(nil), "ServerConfig.UserConfig")
	proto.RegisterType((*ServerConfig_Profile)(nil), "ServerConfig.Profile")
	proto.RegisterMapType((map[string]string)(nil), "ServerConfig.Profile.CertPermissionsEntry")
}

func init() { proto.RegisterFile("sso.proto", fileDescriptor_37aabceb39ca51ce) }

var fileDescriptor_37aabceb39ca51ce = []byte{
	// 931 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x55, 0x61, 0x4f, 0x23, 0x37,
	0x10, 0xbd, 0x84, 0x12, 0xc8, 0x84, 0xc0, 0xc6, 0x17, 0xb8, 0xbd, 0xa0, 0x0b, 0x88, 0xaa, 0x55,
	0x74, 0x95, 0x56, 0x2a, 0x3d, 0xa9, 0x55, 0xdb, 0x2f, 0x61, 0x13, 0x8e, 0x28, 0x11, 0xa0, 0x04,
	0xa8, 0xfa, 0xc9, 0xda, 0xdb, 0x75, 0x12, 0x2b, 0x1b, 0x7b, 0x6b, 0x7b, 0x39, 0xf1, 0x2b, 0xfa,
	0x47, 0x2a, 0xf5, 0x2f, 0x9e, 0x6c, 0xef, 0x26, 0x0b, 0xe4, 0xdb, 0xee, 0x9b, 0xe7, 0x37, 0xf6,
	0x9b, 0xf1, 0x18, 0xaa, 0x52, 0x72, 0x2f, 0x11, 0x5c, 0xf1, 0xb3, 0x21, 0x1c, 0x4c, 0x26, 0x57,
	0x3e, 0x11, 0x4a, 0x8e, 0xc9, 0x3f, 0x29, 0x91, 0x0a, 0xbd, 0x87, 0x5d, 0x1a, 0x61, 0xc5, 0x17,
	0x84, 0xb9, 0xa5, 0xd3, 0x52, 0xa7, 0x3a, 0xde, 0xa1, 0xd1, 0x9d, 0xfe, 0x45, 0x1f, 0x00, 0x92,
	0xf4, 0x4b, 0x4c, 0x43, 0xbc, 0x20, 0x4f, 0x6e, 0xd9, 0x04, 0xab, 0x16, 0x19, 0x92, 0xa7, 0xb3,
	0xff, 0x4a, 0xe0, 0xac, 0xd5, 0x64, 0xc2, 0x99, 0x24, 0xe8, 0x07, 0xa8, 0x48, 0x15, 0xa8, 0x54,
	0x1a, 0xb1, 0xfd, 0xf3, 0xba, 0x97, 0x87, 0x7c, 0x1e, 0x91, 0x71, 0x16, 0x44, 0xa7, 0x50, 0x0b,
	0x89, 0x50, 0x74, 0x4a, 0xc3, 0x40, 0x91, 0x4c, 0xbb, 0x08, 0xa1, 0x5f, 0xe1, 0x5d, 0xe1, 0x17,
	0x07, 0xa9, 0x9a, 0x73, 0x41, 0x15, 0x25, 0xd2, 0xdd, 0x3a, 0xdd, 0xea, 0x54, 0xc7, 0x47, 0x85,
	0x70, 0x77, 0x1d, 0x45, 0x47, 0x50, 0x09, 0x39, 0x9b, 0xd2, 0x99, 0xfb, 0x9d, 0xe1, 0x65, 0x7f,
	0x67, 0xff, 0xd7, 0x60, 0x6f, 0x42, 0xc4, 0x23, 0x11, 0xbe, 0x01, 0x50, 0x1b, 0x6a, 0x61, 0xa0,
	0x8f, 0x86, 0x93, 0x40, 0xcd, 0xb3, 0xc3, 0x57, 0xc3, 0x60, 0x48, 0x9e, 0x6e, 0x03, 0x35, 0x47,
	0x3e, 0xb4, 0x67, 0x84, 0x11, 0xa1, 0xd3, 0xeb, 0x5c, 0x38, 0x4a, 0x45, 0xa0, 0x28, 0x67, 0x58,
	0x92, 0x90, 0xb3, 0x48, 0x9a, 0x6d, 0x6f, 0x8f, 0x8f, 0x73, 0x96, 0x76, 0xa2, 0x97, 0x71, 0x26,
	0x96, 0x82, 0x7a, 0x50, 0x0f, 0xe2, 0x98, 0x7f, 0x25, 0x11, 0x4e, 0x25, 0x11, 0xd2, 0x6c, 0xaa,
	0x76, 0x7e, 0xe2, 0x15, 0xb7, 0xe2, 0x75, 0x2d, 0xe5, 0x5e, 0x33, 0xfa, 0x4c, 0x89, 0xa7, 0xf1,
	0x5e, 0x50, 0x80, 0xd0, 0x09, 0xd4, 0x62, 0x2a, 0x15, 0x61, 0x38, 0xe1, 0x42, 0xb9, 0xdb, 0x26,
	0x2f, 0x58, 0xe8, 0x96, 0x0b, 0x85, 0xfe, 0x84, 0xe3, 0x3c, 0x4d, 0xc4, 0x97, 0x01, 0x65, 0x78,
	0xca, 0x05, 0x5e, 0x15, 0xb6, 0x62, 0xce, 0xf6, 0x2e, 0xa3, 0xf4, 0x0c, 0xe3, 0x92, 0x8b, 0x41,
	0x56, 0xe8, 0x2e, 0xb4, 0xf3, 0xd5, 0x61, 0x4c, 0x09, 0x53, 0x7a, 0xe5, 0x33, 0x81, 0x1d, 0x23,
	0xf0, 0x3e, 0x63, 0xf9, 0x86, 0x34, 0x88, 0x0a, 0x12, 0x1d, 0x70, 0xa4, 0x39, 0x91, 0xb5, 0xca,
	0x38, 0xba, 0x6b, 0x16, 0xed, 0x5b, 0x5c, 0x9b, 0x63, 0x6c, 0xfd, 0x11, 0x0e, 0x32, 0xe6, 0xca,
	0xfa, 0xaa, 0x21, 0xd6, 0x2d, 0x9c, 0xdb, 0xff, 0x01, 0x20, 0x0c, 0x70, 0xc8, 0x97, 0x4b, 0xc2,
	0x94, 0x5b, 0xcb, 0xab, 0xe3, 0x5b, 0x40, 0x27, 0x9c, 0x2b, 0x95, 0xe0, 0xa2, 0x2f, 0x7b, 0xc6,
	0x97, 0x7d, 0x8d, 0x8f, 0xd6, 0xde, 0x7c, 0xbf, 0x2e, 0xc1, 0x9c, 0x4b, 0x25, 0xdd, 0xba, 0xe9,
	0x8b, 0xdc, 0xe1, 0x2b, 0x8d, 0xa1, 0x0b, 0x68, 0x4b, 0x39, 0xc7, 0x21, 0x67, 0x8c, 0x84, 0xca,
	0x1c, 0xde, 0x76, 0xba, 0xd9, 0xa4, 0x16, 0x3f, 0x30, 0xe2, 0x2d, 0x29, 0xe7, 0xbe, 0x25, 0x5d,
	0x72, 0x71, 0x9b, 0x53, 0x4c, 0xa2, 0x1e, 0xd4, 0x75, 0x8d, 0x71, 0x22, 0xf8, 0x94, 0xc6, 0x44,
	0xba, 0xce, 0xa6, 0x5a, 0xeb, 0x8a, 0xde, 0x66, 0x8c, 0xac, 0xd6, 0x69, 0x01, 0x42, 0x3f, 0xc3,
	0xa1, 0xde, 0x26, 0x96, 0x74, 0xc6, 0x28, 0x9b, 0x61, 0x15, 0x4b, 0xeb, 0x52, 0xc3, 0x58, 0x80,
	0x74, 0x70, 0x62, 0x63, 0x77, 0xb1, 0x34, 0x56, 0x7d, 0x82, 0x23, 0x4e, 0xa3, 0x10, 0xdb, 0x4e,
	0xcf, 0xbb, 0x34, 0x15, 0xb1, 0x8b, 0xcc, 0x9a, 0xa6, 0x8e, 0xfa, 0xc5, 0xe0, 0xbd, 0x88, 0xd1,
	0x1f, 0x70, 0x1c, 0x73, 0xbe, 0x30, 0x67, 0x0d, 0xd2, 0x88, 0x12, 0x16, 0x12, 0x4c, 0x19, 0x0e,
	0x92, 0x04, 0xd3, 0xc8, 0x7d, 0x7b, 0x5a, 0xea, 0xec, 0x8e, 0x8f, 0x34, 0xe5, 0x92, 0x8b, 0x6e,
	0x46, 0x18, 0xb0, 0x6e, 0x92, 0x0c, 0x22, 0xe4, 0xc3, 0xc9, 0x6a, 0xb1, 0xde, 0xd1, 0xba, 0xf1,
	0x28, 0xc3, 0x64, 0x19, 0xd0, 0xd8, 0x6d, 0x1a, 0x81, 0x56, 0x26, 0x70, 0x65, 0x48, 0xb6, 0xf5,
	0x06, 0xac, 0xaf, 0x19, 0xc8, 0x83, 0xb7, 0x72, 0x41, 0x13, 0xcb, 0xc7, 0x8f, 0x44, 0xd0, 0x29,
	0x25, 0x91, 0x7b, 0x68, 0x16, 0x36, 0x74, 0xc8, 0xf0, 0x1e, 0xb2, 0x40, 0xab, 0x03, 0xa0, 0xdd,
	0xcb, 0xee, 0x6f, 0x0b, 0x76, 0x57, 0x4e, 0xdb, 0xab, 0xbe, 0xfa, 0x6f, 0xfd, 0x5b, 0x86, 0x9d,
	0xcc, 0x51, 0xd4, 0x06, 0x48, 0x04, 0x65, 0x21, 0x4d, 0x82, 0x58, 0x8f, 0x25, 0xcd, 0x2c, 0x20,
	0xe8, 0x1e, 0x1c, 0xdb, 0xb3, 0x44, 0x2c, 0xa9, 0x94, 0x94, 0x33, 0x7d, 0xb3, 0x75, 0xe5, 0x3e,
	0x3e, 0xaf, 0x5c, 0x26, 0xe8, 0x99, 0x56, 0x5e, 0x93, 0x6d, 0x11, 0x0f, 0xc2, 0xe7, 0xa8, 0xb9,
	0x11, 0xb6, 0xa3, 0xa6, 0x74, 0x86, 0x63, 0xca, 0x56, 0x93, 0x6b, 0xdf, 0xf6, 0xd0, 0x94, 0xce,
	0x46, 0x1a, 0xd5, 0xb7, 0x7b, 0xc1, 0xf8, 0x57, 0x96, 0xb5, 0xa7, 0x3d, 0x0b, 0x18, 0xc8, 0x34,
	0x67, 0xeb, 0x02, 0x9a, 0x9b, 0x72, 0x22, 0x07, 0xb6, 0xf4, 0x64, 0xb6, 0x93, 0x4b, 0x7f, 0xa2,
	0x26, 0x6c, 0x3f, 0x06, 0x71, 0x9a, 0x4f, 0x54, 0xfb, 0xf3, 0x7b, 0xf9, 0xb7, 0x52, 0xeb, 0x6f,
	0x68, 0xbc, 0x9a, 0x32, 0x1b, 0x04, 0xbc, 0xa2, 0x40, 0xed, 0xdc, 0x7d, 0xdd, 0xbb, 0xf6, 0xb3,
	0x28, 0xfd, 0x00, 0x8d, 0x57, 0x4d, 0xbd, 0x41, 0xfa, 0xa7, 0xe7, 0xd2, 0x87, 0x1b, 0xcd, 0x2d,
	0xe8, 0x7e, 0xbc, 0x80, 0xbd, 0xe2, 0xe3, 0x81, 0x2a, 0x50, 0xbe, 0x19, 0x3a, 0x6f, 0x50, 0x13,
	0x9c, 0xc1, 0xf5, 0x43, 0x77, 0x34, 0xe8, 0xe1, 0x41, 0x0f, 0xdf, 0xdd, 0x0c, 0xfb, 0xd7, 0x4e,
	0x49, 0xa3, 0xd7, 0x37, 0xd8, 0xef, 0x8f, 0xef, 0x26, 0xb8, 0x3b, 0x1a, 0xdd, 0xfc, 0xd5, 0xef,
	0x39, 0xe5, 0xf3, 0x3e, 0xd4, 0x3f, 0x13, 0x33, 0x99, 0x6d, 0x36, 0xf4, 0x09, 0x6a, 0x9f, 0x89,
	0xca, 0xdf, 0x2d, 0xe4, 0x78, 0x2f, 0x1e, 0xc4, 0x56, 0xc3, 0x7b, 0xf9, 0xa8, 0x9d, 0xbd, 0xf9,
	0x52, 0x31, 0xef, 0xe7, 0x2f, 0xdf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x70, 0xe2, 0xb7, 0xad, 0x4c,
	0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GeeCertServerClient is the client API for GeeCertServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GeeCertServerClient interface {
	GetSSHCerts(ctx context.Context, in *SSHCertsRequest, opts ...grpc.CallOption) (*SSHCertsResponse, error)
}

type geeCertServerClient struct {
	cc *grpc.ClientConn
}

func NewGeeCertServerClient(cc *grpc.ClientConn) GeeCertServerClient {
	return &geeCertServerClient{cc}
}

func (c *geeCertServerClient) GetSSHCerts(ctx context.Context, in *SSHCertsRequest, opts ...grpc.CallOption) (*SSHCertsResponse, error) {
	out := new(SSHCertsResponse)
	err := c.cc.Invoke(ctx, "/GeeCertServer/GetSSHCerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeeCertServerServer is the server API for GeeCertServer service.
type GeeCertServerServer interface {
	GetSSHCerts(context.Context, *SSHCertsRequest) (*SSHCertsResponse, error)
}

// UnimplementedGeeCertServerServer can be embedded to have forward compatible implementations.
type UnimplementedGeeCertServerServer struct {
}

func (*UnimplementedGeeCertServerServer) GetSSHCerts(ctx context.Context, req *SSHCertsRequest) (*SSHCertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSSHCerts not implemented")
}

func RegisterGeeCertServerServer(s *grpc.Server, srv GeeCertServerServer) {
	s.RegisterService(&_GeeCertServer_serviceDesc, srv)
}

func _GeeCertServer_GetSSHCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHCertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeeCertServerServer).GetSSHCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GeeCertServer/GetSSHCerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeeCertServerServer).GetSSHCerts(ctx, req.(*SSHCertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GeeCertServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GeeCertServer",
	HandlerType: (*GeeCertServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSSHCerts",
			Handler:    _GeeCertServer_GetSSHCerts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso.proto",
}
